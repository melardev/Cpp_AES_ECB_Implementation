#include "AES.h"
#include <iostream> // std::cout std::endl
#include <iomanip> // setw()

const unsigned char AES::padding = 0x00;

const unsigned char AES::Rcon[30] = {
	AES::padding,
0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
0x6c, -0x28, -0x55, 0x4d, -0x66, 0x2f, 0x5e, -0x44, 0x63, -0x3a,
-0x69, 0x35, 0x6a, -0x2c, -0x4d, 0x7d, -0x6, -0x11, -0x3b,
};

const unsigned char AES::galois[4][4] = {
	{ 2, 3, 1, 1 },
	{ 1, 2, 3, 1 },
	{ 1, 1, 2, 3 },
	{ 3, 1, 1, 2 }
};

const unsigned char AES::sbox[16][16] = {
	{ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76 },
	{ 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0 },
	{ 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15 },
	{ 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75 },
	{ 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84 },
	{ 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF },
	{ 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8 },
	{ 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2 },
	{ 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73 },
	{ 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB },
	{ 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79 },
	{ 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08 },
	{ 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A },
	{ 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E },
	{ 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF },
	{ 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 }
};

const unsigned char AES::L_Table[16][16] = {
	{ 0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1A, 0xC6, 0x4B, 0xC7, 0x1B, 0x68, 0x33, 0xE, 0xDF, 0x03 },
	{ 0x64, 0x04, 0xE0, 0x0E, 0x34, 0x8D, 0x81, 0xEF, 0x4C, 0x71, 0x08, 0xC8, 0xF8, 0x69, 0x1C, 0xC1 },
	{ 0x7D, 0xC2, 0x1D, 0xB5, 0xF9, 0xB9, 0x27, 0x6A, 0x4D, 0xE4, 0xA6, 0x72, 0x9A, 0xC9, 0x09, 0x78 },
	{ 0x65, 0x2F, 0x8A, 0x05, 0x21, 0x0F, 0xE1, 0x24, 0x12, 0xF0, 0x82, 0x45, 0x35, 0x93, 0xDA, 0x8E },
	{ 0x96, 0x8F, 0xDB, 0xBD, 0x36, 0xD0, 0xCE, 0x94, 0x13, 0x5C, 0xD2, 0xF1, 0x40, 0x46, 0x83, 0x38 },
	{ 0x66, 0xDD, 0xFD, 0x30, 0xBF, 0x06, 0x8B, 0x62, 0xB3, 0x25, 0xE2, 0x98, 0x22, 0x88, 0x91, 0x10 },
	{ 0x7E, 0x6E, 0x48, 0xC3, 0xA3, 0xB6, 0x1E, 0x42, 0x3A, 0x6B, 0x28, 0x54, 0xFA, 0x85, 0x3D, 0xBA },
	{ 0x2B, 0x79, 0x0A, 0x15, 0x9B, 0x9F, 0x5E, 0xCA, 0x4E, 0xD4, 0xAC, 0xE5, 0xF3, 0x73, 0xA7, 0x57 },
	{ 0xAF, 0x58, 0xA8, 0x50, 0xF4, 0xEA, 0xD6, 0x74, 0x4F, 0xAE, 0xE9, 0xD5, 0xE7, 0xE6, 0xAD, 0xE8 },
	{ 0x2C, 0xD7, 0x75, 0x7A, 0xEB, 0x16, 0x0B, 0xF5, 0x59, 0xCB, 0x5F, 0xB0, 0x9C, 0xA9, 0x51, 0xA0 },
	{ 0x7F, 0x0C, 0xF6, 0x6F, 0x17, 0xC4, 0x49, 0xEC, 0xD8, 0x43, 0x1F, 0x2D, 0xA4, 0x76, 0x7B, 0xB7 },
	{ 0xCC, 0xBB, 0x3E, 0x5A, 0xFB, 0x60, 0xB1, 0x86, 0x3B, 0x52, 0xA1, 0x6C, 0xAA, 0x55, 0x29, 0x9D },
	{ 0x97, 0xB2, 0x87, 0x90, 0x61, 0xBE, 0xDC, 0xFC, 0xBC, 0x95, 0xCF, 0xCD, 0x37, 0x3F, 0x5B, 0xD1 },
	{ 0x53, 0x39, 0x84, 0x3C, 0x41, 0xA2, 0x6D, 0x47, 0x14, 0x2A, 0x9E, 0x5D, 0x56, 0xF2, 0xD3, 0xAB },
	{ 0x44, 0x11, 0x92, 0xD9, 0x23, 0x20, 0x2E, 0x89, 0xB4, 0x7C, 0xB8, 0x26, 0x77, 0x99, 0xE3, 0xA5 },
	{ 0x67, 0x4A, 0xED, 0xDE, 0xC5, 0x31, 0xFE, 0x18, 0x0D, 0x63, 0x8C, 0x80, 0xC0, 0xF7, 0x70, 0x07 }
};

const unsigned char AES::E_Table[16][16] = {
	{ 0x01, 0x03, 0x05, 0x0F, 0x11, 0x33, 0x55, 0xFF, 0x1A, 0x2E, 0x72, 0x96, 0xA1, 0xF8, 0x13, 0x35 },
	{ 0x5F, 0xE1, 0x38, 0x48, 0xD8, 0x73, 0x95, 0xA4, 0xF7, 0x02, 0x06, 0x0A, 0x1E, 0x22, 0x66, 0xAA },
	{ 0xE5, 0x34, 0x5C, 0xE4, 0x37, 0x59, 0xEB, 0x26, 0x6A, 0xBE, 0xD9, 0x70, 0x90, 0xAB, 0xE6, 0x31 },
	{ 0x53, 0xF5, 0x04, 0x0C, 0x14, 0x3C, 0x44, 0xCC, 0x4F, 0xD1, 0x68, 0xB8, 0xD3, 0x6E, 0xB2, 0xCD },
	{ 0x4C, 0xD4, 0x67, 0xA9, 0xE0, 0x3B, 0x4D, 0xD7, 0x62, 0xA6, 0xF1, 0x08, 0x18, 0x28, 0x78, 0x88 },
	{ 0x83, 0x9E, 0xB9, 0xD0, 0x6B, 0xBD, 0xDC, 0x7F, 0x81, 0x98, 0xB3, 0xCE, 0x49, 0xDB, 0x76, 0x9A },
	{ 0xB5, 0xC4, 0x57, 0xF9, 0x10, 0x30, 0x50, 0xF0, 0x0B, 0x1D, 0x27, 0x69, 0xBB, 0xD6, 0x61, 0xA3 },
	{ 0xFE, 0x19, 0x2B, 0x7D, 0x87, 0x92, 0xAD, 0xEC, 0x2F, 0x71, 0x93, 0xAE, 0xE9, 0x20, 0x60, 0xA0 },
	{ 0xFB, 0x16, 0x3A, 0x4E, 0xD2, 0x6D, 0xB7, 0xC2, 0x5D, 0xE7, 0x32, 0x56, 0xFA, 0x15, 0x3F, 0x41 },
	{ 0xC3, 0x5E, 0xE2, 0x3D, 0x47, 0xC9, 0x40, 0xC0, 0x5B, 0xED, 0x2C, 0x74, 0x9C, 0xBF, 0xDA, 0x75 },
	{ 0x9F, 0xBA, 0xD5, 0x64, 0xAC, 0xEF, 0x2A, 0x7E, 0x82, 0x9D, 0xBC, 0xDF, 0x7A, 0x8E, 0x89, 0x80 },
	{ 0x9B, 0xB6, 0xC1, 0x58, 0xE8, 0x23, 0x65, 0xAF, 0xEA, 0x25, 0x6F, 0xB1, 0xC8, 0x43, 0xC5, 0x54 },
	{ 0xFC, 0x1F, 0x21, 0x63, 0xA5, 0xF4, 0x07, 0x09, 0x1B, 0x2D, 0x77, 0x99, 0xB0, 0xCB, 0x46, 0xCA },
	{ 0x45, 0xCF, 0x4A, 0xDE, 0x79, 0x8B, 0x86, 0x91, 0xA8, 0xE3, 0x3E, 0x42, 0xC6, 0x51, 0xF3, 0x0E },
	{ 0x12, 0x36, 0x5A, 0xEE, 0x29, 0x7B, 0x8D, 0x8C, 0x8F, 0x8A, 0x85, 0x94, 0xA7, 0xF2, 0x0D, 0x17 },
	{ 0x39, 0x4B, 0xDD, 0x7C, 0x84, 0x97, 0xA2, 0xFD, 0x1C, 0x24, 0x6C, 0xB4, 0xC7, 0x52, 0xF6, 0x01 }
};

AES::AES(const std::string& key) : key(key)
{
	Nb = 4; // Number of columns in state
	Nk = 4;	 // Lenght of key in words(Dword)
	Nr = 10; // Number of rounds
}


AES::~AES()
{
}

void AES::keyExpansion()
{
	subkeys.resize(Nb * (Nr + 1));
	for (int i = 0; i < 4; i++)
	{
		subkeys[i] = key[4 * i + 0] << 24
			| key[4 * i + 1] << 16
			| key[4 * i + 2] << 8
			| key[4 * i + 3];
	}

	int temp;
	for (int j = Nk; j < Nb * (Nr + 1); j++) {
		temp = subkeys[j - 1];

		if (j == 8) //for debugging
			int ko = 0;

		if (j % Nk == 0)
		{
			temp = SubWord(RotWord(temp)) ^ (Rcon[j / Nk] << 24); //Rcon -> round constant
		}
		else if (Nk > 6 && (j % Nk == 4))
		{
			temp = SubWord(temp);
		}
		subkeys[j] = subkeys[j - Nk] ^ temp;
	}


	std::cout << "Key expansion, dumping subkeys:" << std::endl;
	for (size_t z = 0; z < subkeys.size() - 1; z++)
	{
		if (z % 8 == 0)
			std::cout << std::endl;
		
		// printf("0x%8x ", subkeys[z]); // C way
		std::cout << "0x" << std::setw(8) << std::hex << subkeys[z] << " "; // C++
	}

	std::cout << std::endl << std::endl;
}

int AES::RotWord(int temp)
{
	unsigned int oneByte = (unsigned int)temp >> 24;
	unsigned int rotated = 0;
	rotated = temp << 8;
	rotated = rotated | oneByte;
	return rotated;
}

int AES::SubWord(int temp)
{
	unsigned char oneByte;
	int subs = 0;
	if (temp << 8 == 0xde0cf800)// for debugging
		int lok = 2;
	for (int i = 0; i < 4; i++)
	{
		oneByte = temp >> 24;
		unsigned char xIndex = oneByte >> 4;
		unsigned char yIndex = oneByte & 0x0f;
		subs = subs | (sbox[xIndex][yIndex]);
		if (i == 3)
			break;
		subs = subs << 8;
		temp = temp << 8;
	}
	return subs;
}

// We receive a copy of the plaintext string
std::string AES::encrypt(std::string plaintext)
{
	std::string cipherText;
	int plainTextLenght = plaintext.length();


	if (plainTextLenght % (4 * Nb) != 0)
		plaintext.append((4 * Nb) - (plainTextLenght % (4 * Nb)), '\0');

	// we create the state matrix which is Nb * 4
	int count = 0;
	while (count < plainTextLenght)
	{
		for (int col = 0; col < 4; col++)
		{
			for (int row = 0; row < 4; row++)
			{
				state[row][col] = plaintext[count + (col * Nb + row)];
			}
		}

		addRoundKey(0);

		for (int round = 1; round < Nr; round++)
		{
			subBytes();
			shiftRows();
			mixColumns();
			addRoundKey(round);
		}

		subBytes();
		shiftRows();
		addRoundKey(Nr);

		cipherText += stateToString();
		count += 4 * Nb;
	}

	return cipherText;
}

void AES::addRoundKey(int round)
{
	//modify the state , xor each byte of a column with one row of subkeys
	//ie first column of the state with first row of the subkeys
	for (int col = 0; col < Nb; col++)
	{
		unsigned int subkey = subkeys[(round * Nb) + col];
		for (int row = 0; row < 4; row++)
		{
			state[row][col] ^= subkey >> 24;
			subkey = subkey << 8;
		}
	}
}

void AES::shiftRows()
{
	unsigned int shifted[4];
	for (int row = 0; row < 4; row++)
	{
		shifted[row] = (state[row][0] << 24)
			| (state[row][1] << 16)
			| (state[row][2] << 8)
			| (state[row][3] << 0);
	}

	for (int row = 0; row < 4; row++)
	{
		for (int numS = row; numS > 0; numS--)
		{
			unsigned char oneByte = shifted[row] >> 24;
			shifted[row] = shifted[row] << 8;
			shifted[row] = shifted[row] | oneByte;
		}
	}
	for (int col = 0; col < 4; col++)
	{
		for (int row = 0; row < 4; row++)
		{
			unsigned char oneByte = shifted[row] >> ((3 - col) * 8) & 0xff;
			state[row][col] = oneByte;
		}
	}
}

void AES::subBytes()
{
	for (int col = 0; col < 4; col++)
	{
		for (int row = 0; row < 4; row++)
		{
			unsigned int xIndex = state[row][col] >> 4;
			unsigned int yIndex = state[row][col] & 0x0f;
			state[row][col] = sbox[xIndex][yIndex];
		}
	}
}

void AES::mixColumns()
{
	for (int col = 0; col < 4; col++)
	{
		unsigned char result[4];
		for (int row = 0; row < 4; row++)
		{
			unsigned char op1 = Mul(state[0][col], galois[row][0]);
			unsigned char op2 = Mul(state[1][col], galois[row][1]);
			unsigned char op3 = Mul(state[2][col], galois[row][2]);
			unsigned char op4 = Mul(state[3][col], galois[row][3]);
			unsigned char op5 = op1 ^ op2 ^ op3 ^ op4;
			result[row] = Mul(state[0][col], galois[row][0])
				^ Mul(state[1][col], galois[row][1])
				^ Mul(state[2][col], galois[row][2])
				^ Mul(state[3][col], galois[row][3]);
		}

		state[0][col] = result[0];
		state[1][col] = result[1];
		state[2][col] = result[2];
		state[3][col] = result[3];
	}

}
unsigned char AES::Mul(unsigned char state, unsigned char galois)
{
	if (state && galois)
	{
		unsigned char xState = (unsigned char)state >> 4;
		unsigned char yState = (unsigned char)state & 0x0f;
		unsigned char xGalois = (unsigned char)galois >> 4;
		unsigned char yGalois = (unsigned char)galois & 0x0f;
		unsigned short sum = ((unsigned char)L_Table[xState][yState] + (unsigned char)L_Table[xGalois][yGalois]) % 255;
		unsigned char xSum = (unsigned char)sum >> 4;
		unsigned char ySum = (unsigned char)sum & 0x0f;
		unsigned char result = (unsigned char)E_Table[xSum][ySum];
		return result;
	}
	return 0;
}

std::string AES::stateToString() {

	std::string output;
	for (int col = 0; col < 4; col++)
	{
		for (int row = 0; row < 4; row++)
		{
			output.push_back(state[row][col]);
		}
	}
	return output;
}